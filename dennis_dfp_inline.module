<?php
/**
 * @file
 * dennis_dfp_inline.module
 */

define("DENNIS_DFP_INLINE_FIRST_POSITION", 1);
define("DENNIS_DFP_INLINE_MIN_DISTANCE", 3);
define("DENNIS_DFP_INLINE_PARAGRAPH_LENGTH", 100);

/**
 * Implements hook_context_registry().
 */
function dennis_dfp_inline_context_registry() {
  return array(
    'reactions' => array(
      'dennis_dfp_inline' => array(
        'title' => t('DFP Inline Tag'),
        'plugin' => 'dennis_dfp_inline',
      ),
    ),
  );
}

/**
 * Implements hook_context_plugins().
 */
function dennis_dfp_inline_context_plugins() {
  $plugins = array();
  $plugins['dennis_dfp_inline'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'dennis_dfp_inline') . '/plugins',
      'file' => 'dennis_dfp_inline_context_reaction_add.inc',
      'class' => 'dennis_dfp_inline_context_reaction_add',
      'parent' => 'context_reaction',
    ),
  );

  return $plugins;
}

/**
 * Implements of hook_page_build().
 */
function dennis_dfp_inline_page_build(&$page) {
  if (module_exists('context') && $plugin = context_get_plugin('reaction', 'dennis_dfp_inline')) {
    $plugin->execute();

    if (isset($plugin->inline_tags) && !empty($plugin->inline_tags)) {
      $inline_tag_data = array();

      foreach ($plugin->inline_tags as $key => $machine_name) {
        $tag_render = dfp_tag($machine_name);
        if (!empty($tag_render) && empty($tag_render['dfp_wrapper']['tag']['#tag']->disabled)) {
          $tag = $tag_render['dfp_wrapper']['tag']['#tag'];
          // Prepare some configuration for the JavaScript.
          $inline_tag_data[$machine_name] = array(
            'float' => $tag->settings['inline']['float'],
            'margin' => $tag->settings['inline']['margin'],
            'classes' => $tag->settings['inline']['classes'],
          );
          // This triggers the necessary Google Publisher Tag code in <head>.
          render($tag_render);
        }
      }

      if (!empty($inline_tag_data)) {
        $config = array(
          'firstPosition' => variable_get('dennis_dfp_inline_first_position', DENNIS_DFP_INLINE_FIRST_POSITION),
          'minDistance' => variable_get('dennis_dfp_inline_min_distance', DENNIS_DFP_INLINE_MIN_DISTANCE),
          'minParaLength' => variable_get('dennis_dfp_inline_paragraph_length', DENNIS_DFP_INLINE_PARAGRAPH_LENGTH),
        );
        // Add any collected JS configuration.
        drupal_add_js(array(
          'dennisDfpInline' => array(
            'tags' => $inline_tag_data,
            'config' => $config,
          ),
        ), 'setting');
        // Load the JS app.
        _dennis_dfp_inline_load_js();
      }
    }
  }
}

/**
 * Load the JS application via require
 */
function _dennis_dfp_inline_load_js() {
  $js_devel = variable_get('dennis_js_devel', FALSE);
  $subfolder = ($js_devel) ? 'src' : 'dist';
  $path = drupal_get_path('module', 'dennis_dfp_inline') . '/js/' . $subfolder;
  $options = array(
    'returns' => 'app',
    'init' => 'app.init();',
    'group' => DENNIS_JS_INLINE,
    'environment' => DENNIS_JS_ENV_ALL,
  );

  // Add the application path prefix - development mode as default.
  dennis_js_add_js('dfpinline', array(
    'path' => $path,
  ));

  // Production mode extras.
  if (!$js_devel) {
    // Production mode needs the full path.
    $options += array(
      'path' => $path . '/dfpinline/app',
    );
    // Add bundle config.
    dennis_js_add_js(array(
      'bundles' => array(
        'dfpinline/app' => array('domReady', 'has'),
      ),
    ), 'config');
  }

  // Init the app itself, this in both dev and production.
  dennis_js_add_js('dfpinline/app', $options);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Extend DFP tag settings with inline configuration.
 */
function dennis_dfp_inline_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
  if ($form_state['plugin']['schema'] == 'dfp_tags') {

    // Create a default tag object.
    $tag = ($form_state['op'] == 'add' ? $form_state['item'] : $form_state['item']->raw);

    $form['tag_display_options']['use'] = array(
      '#type' => 'checkbox',
      '#title' => t('Inline ad'),
      '#description' => t('Render this slot inline in the body of content pages. Please note that an ad slot cannot be configured both as block and inline to avoid ad slot duplication.'),
      '#default_value' => isset($tag->settings['inline']['use']) ? $tag->settings['inline']['use'] : FALSE,
      '#parents' => array('settings', 'inline', 'use'),
      '#states' => array(
        'visible' => array(
          ':input[name="settings[short_tag]"]' => array('checked' => FALSE),
        ),
        'enabled' => array(
          ':input[name="block"]' => array('checked' => FALSE),
        ),
        'checked' => array(
          ':input[name="block"]' => array('checked' => FALSE),
          ':input[name="settings[short_tag]"]' => array('checked' => FALSE),
        ),
      ),
    );

    $form['tag_display_options']['inline'] = array(
      '#type' => 'fieldset',
      '#description' => t('Options for inline rendering'),
      '#states' => array(
        'visible' => array(
          ':input[name="settings[inline][use]"]' => array('checked' => TRUE),
          ':input[name="settings[short_tag]"]' => array('checked' => FALSE),
          ':input[name="block"]' => array('checked' => FALSE),
        ),
      ),
    );

    $form['tag_display_options']['inline']['float'] = array(
      '#type' => 'select',
      '#title' => t('Float'),
      '#description' => t('Select ad container floating.'),
      '#default_value' => isset($tag->settings['inline']['float']) ? $tag->settings['inline']['float'] : '',
      '#options' => array(
        '' => t('None'),
        'left' => t('Left'),
        'right' => t('Right'),
      ),
      '#parents' => array('settings', 'inline', 'float'),
    );

    $form['tag_display_options']['inline']['margin'] = array(
      '#type' => 'textfield',
      '#title' => t('CSS margin'),
      '#description' => t('Add CSS margin values'),
      '#size' => 20,
      '#field_suffix' => 'px',
      '#default_value' => isset($tag->settings['inline']['margin']) ? $tag->settings['inline']['margin'] : '',
      '#parents' => array('settings', 'inline', 'margin'),
    );

    $form['tag_display_options']['inline']['classes'] = array(
      '#type' => 'textfield',
      '#title' => t('CSS classes'),
      '#description' => t('If rendered inline, add optional CSS class names to the wrapper element of the ad slot.'),
      '#default_value' => isset($tag->settings['inline']['classes']) ? $tag->settings['inline']['classes'] : '',
      '#parents' => array('settings', 'inline', 'classes'),
    );
  }
}
