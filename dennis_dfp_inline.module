<?php
/**
 * @file
 * dennis_dfp_inline.module
 */

define("DENNIS_DFP_INLINE_SELECTOR", '.node-full > .content > .field-name-body');
define("DENNIS_DFP_INLINE_PLACEHOLDER", '<!--#dfpinline#-->');
define("DENNIS_DFP_INLINE_FIRST_POSITION", 2);
define("DENNIS_DFP_INLINE_MIN_DISTANCE", 3);
define("DENNIS_DFP_INLINE_PARAGRAPH_LENGTH", 100);

/**
 * Implements hook_context_registry().
 */
function dennis_dfp_inline_context_registry() {
  return array(
    'reactions' => array(
      'dennis_dfp_inline' => array(
        'title' => t('DFP Inline Tag'),
        'plugin' => 'dennis_dfp_inline',
      ),
    ),
  );
}

/**
 * Implements hook_context_plugins().
 */
function dennis_dfp_inline_context_plugins() {
  $plugins = array();
  $plugins['dennis_dfp_inline'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'dennis_dfp_inline') . '/plugins',
      'file' => 'dennis_dfp_inline_context_reaction_add.inc',
      'class' => 'dennis_dfp_inline_context_reaction_add',
      'parent' => 'context_reaction',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_page_build().
 */
function dennis_dfp_inline_page_build(&$page) {
  if (module_exists('context') && $plugin = context_get_plugin('reaction', 'dennis_dfp_inline')) {
    $plugin->execute();

    if (isset($plugin->inline_tags) && !empty($plugin->inline_tags)) {
      dfp_inline_tags($plugin->inline_tags);
    }
  }
}

/**
 * Add slot definitions and bootstrap data for Javascript.
 *
 * @param array $tags
 *   An array of ad tags to prepare for display
 *
 * @return array
 *   An array of ad slots with keys as machine name and individual slot settings
 *   for each slot.
 */
function dfp_inline_tags($tags = array()) {
  if (!$tags) {
    return FALSE;
  }

  $inline_tag_data = array();

  foreach ($tags as $machine_name) {
    $tag_render = dfp_tag($machine_name);
    if (!empty($tag_render) && empty($tag_render['dfp_wrapper']['tag']['#tag']->disabled)) {
      $tag = $tag_render['dfp_wrapper']['tag']['#tag'];

      // Check if tag is an inline tag once more. Although the context reaction
      // can only be configured with inline tags, this function could be called
      // directly from elsewhere.
      if (!isset($tag->settings['inline']) || !isset($tag->settings['inline']['use']) || $tag->settings['inline']['use'] !== 1) {
        watchdog('dennis_dfp_inline', 'Ad tag %machinename passed to dfp_inline_tags() but not configured as an inline tag.', array('%machinename' => $machinename), WATCHDOG_WARNING);
        continue;
      }

      // Prepare some configuration for the JavaScript.
      unset($tag->settings['inline']['use']);
      // $inline_tag_data[$machine_name] = $tag->settings['inline'];
      $inline_tag_data[] = array($machine_name, $tag->settings['inline']);
      // This triggers the necessary Google Publisher Tag code in <head>.
      render($tag_render);
    }
  }

  if (empty($inline_tag_data)) {
    return FALSE;
  }

  $config = array(
    'selector' => variable_get('dennis_dfp_inline_selector', DENNIS_DFP_INLINE_SELECTOR),
    'placeholder' => variable_get('dennis_dfp_inline_placeholder', DENNIS_DFP_INLINE_PLACEHOLDER),
    'firstPosition' => variable_get('dennis_dfp_inline_first_position', DENNIS_DFP_INLINE_FIRST_POSITION),
    'minDistance' => variable_get('dennis_dfp_inline_min_distance', DENNIS_DFP_INLINE_MIN_DISTANCE),
    'minParaLength' => variable_get('dennis_dfp_inline_paragraph_length', DENNIS_DFP_INLINE_PARAGRAPH_LENGTH),
  );
  // Add any collected JS configuration.
  drupal_add_js(array(
    'dennisDfpInline' => array(
      'config' => $config,
      'tags' => $inline_tag_data,
    ),
  ), 'setting');
  // Load the JS app.
  _dennis_dfp_inline_load_js();

  return $inline_tag_data;
}

/**
 * Load the JS application via require.
 */
function _dennis_dfp_inline_load_js() {
  $js_devel = variable_get('dennis_js_devel', FALSE);
  $subfolder = ($js_devel) ? 'src' : 'dist';
  $path = drupal_get_path('module', 'dennis_dfp_inline') . '/js/' . $subfolder;
  $options = array(
    'returns' => 'app',
    'init' => 'app.init();',
    'group' => DENNIS_JS_INLINE,
    'environment' => DENNIS_JS_ENV_ALL,
  );

  // Add the application path prefix - development mode as default.
  dennis_js_add_js('dfpinline', array(
    'path' => $path,
  ));

  // Production mode extras.
  if (!$js_devel) {
    // Production mode needs the full path.
    $options += array(
      'path' => $path . '/dfpinline/app',
    );
    // Add bundle config.
    dennis_js_add_js(array(
      'bundles' => array(
        'dfpinline/app' => array('domReady', 'has'),
      ),
    ), 'config');
  }

  // Init the app itself, this in both dev and production.
  dennis_js_add_js('dfpinline/app', $options);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Extend DFP tag settings with inline configuration.
 */
function dennis_dfp_inline_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
  if ($form_state['plugin']['schema'] == 'dfp_tags') {

    // Create a default tag object.
    $tag = ($form_state['op'] == 'add' ? $form_state['item'] : $form_state['item']->raw);

    $form['tag_display_options']['use'] = array(
      '#type' => 'checkbox',
      '#title' => t('Inline ad'),
      '#description' => t('Render this slot inline in the body of content pages. Please note that an ad slot cannot be configured both as block and inline to avoid ad slot duplication.'),
      '#default_value' => isset($tag->settings['inline']['use']) ? $tag->settings['inline']['use'] : FALSE,
      '#parents' => array('settings', 'inline', 'use'),
      '#states' => array(
        'visible' => array(
          ':input[name="settings[short_tag]"]' => array('checked' => FALSE),
        ),
        'enabled' => array(
          ':input[name="block"]' => array('checked' => FALSE),
        ),
        'checked' => array(
          ':input[name="block"]' => array('checked' => FALSE),
          ':input[name="settings[short_tag]"]' => array('checked' => FALSE),
        ),
      ),
    );

    $form['tag_display_options']['inline'] = array(
      '#type' => 'fieldset',
      '#description' => t('Options for inline rendering'),
      '#states' => array(
        'visible' => array(
          ':input[name="settings[inline][use]"]' => array('checked' => TRUE),
          ':input[name="settings[short_tag]"]' => array('checked' => FALSE),
          ':input[name="block"]' => array('checked' => FALSE),
        ),
      ),
    );

    $form['tag_display_options']['inline']['classes'] = array(
      '#type' => 'textfield',
      '#title' => t('CSS classes'),
      '#description' => t('Add optional CSS classes to the wrapper element of the inline ad slot.'),
      '#default_value' => isset($tag->settings['inline']['classes']) ? $tag->settings['inline']['classes'] : '',
      '#parents' => array('settings', 'inline', 'classes'),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Extend Global settings form with inline configuration.
 */
function dennis_dfp_inline_form_dfp_admin_settings_alter(&$form, &$form_state) {

  $form['global_inline_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Global Inline Settings'),
    '#description' => t('The following settings control the automated placement of inline ad slots.'),
    '#group' => 'settings',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#attached' => array(
      'js' => array(
        'vertical-tabs' => drupal_get_path('module', 'dennis_dfp_inline') . '/js/admin/dennis_dfp_inline.admin.js',
      ),
    ),
  );
  $form['global_inline_settings']['dennis_dfp_inline_selector'] = array(
    '#type' => 'textfield',
    '#title' => t('Field content selector'),
    '#default_value' => variable_get('dennis_dfp_inline_selector', DENNIS_DFP_INLINE_SELECTOR),
    '#description' => t('The DOM selector which translates to a single element with children as paragraphs or other blocks (media images, headings, etc.). This will be used for analysis and the placement of inline ad slots.'),
  );
  $form['global_inline_settings']['dennis_dfp_inline_placeholder'] = array(
    '#type' => 'textfield',
    '#title' => t('Inline ad placeholder'),
    '#default_value' => variable_get('dennis_dfp_inline_placeholder', DENNIS_DFP_INLINE_PLACEHOLDER),
    '#description' => t('The pattern to use for manually inserted inline ad slot placeholders.'),
  );
  $form['global_inline_settings']['dennis_dfp_inline_first_position'] = array(
    '#type' => 'select',
    '#title' => t('Refresh ads on every nth slide change'),
    '#options' => array(
      1 => t('first'),
      2 => t('second'),
      3 => t('third'),
      4 => t('fourth'),
      5 => t('fifth'),
    ),
    '#field_prefix' => 'Before the',
    '#field_suffix' => 'paragraph or other block level element (media file, etc.)',
    '#default_value' => variable_get('dennis_dfp_inline_first_position', DENNIS_DFP_INLINE_FIRST_POSITION),
    '#description' => t('The first ad slot should appear BEFORE the configured element. Please note that this only applies if there are no manually added placeholders in the content.'),
  );
  $form['global_inline_settings']['dennis_dfp_inline_min_distance'] = array(
    '#type' => 'select',
    '#title' => t('Minimum distance between ad slots'),
    '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)),
    '#default_value' => variable_get('dennis_dfp_inline_min_distance', DENNIS_DFP_INLINE_MIN_DISTANCE),
    '#description' => t('The minimum distance measured in paragraphs between the automated ad slot placements in content. If content is shorter then ads will be added to the end of the content.'),
  );
}
